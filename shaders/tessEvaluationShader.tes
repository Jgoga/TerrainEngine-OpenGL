#version 410 core                                                                               
                                                                                                
layout(triangles, equal_spacing, ccw) in;                                                       
                                                                                                
uniform mat4 gVP;                                                                               
uniform float gDispFactor;      
uniform float freq;

uniform vec3 gEyeWorldPos;                                                                      
uniform vec4 clipPlane;
					   
in vec3 WorldPos_ES_in[];                                                                       
in vec2 TexCoord_ES_in[];                                                                       
in vec3 Normal_ES_in[];                                                                         
                                                                                                
out vec3 WorldPos;                                                                        
out vec2 texCoord;                                                                        
out vec3 Normal;
out float distFromPos;
out float dispFactor;
out float height;
                                                                                                
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                   
{                                                                                               
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                   
{                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}

float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float InterpolatedNoise(int ind, float x, float y) {
	int integer_X = int(floor(x));
	float fractional_X = fract(x);
	int integer_Y = int(floor(y));
	float fractional_Y = fract(y);
	vec2 randomInput = vec2(integer_X, integer_Y);
	float v1 = Random2D(randomInput);
	float v2 = Random2D(randomInput + vec2(1.0, 0.0));
	float v3 = Random2D(randomInput + vec2(0.0, 1.0));
	float v4 = Random2D(randomInput + vec2(1.0, 1.0));
	float i1 = mix(v1, v2, fractional_X);
	float i2 = mix(v3, v4, fractional_X);
	return mix(i1, i2, fractional_Y);
}

float perlin(float x, float y){
	
    int numOctaves = 10;
	float persistence = 0.5;
	float total = 0,
		frequency = pow(2, numOctaves),
		amplitude = 1;
	for (int i = 0; i < numOctaves; ++i) {
		frequency /= 2;
		amplitude *= persistence;
		
		total += InterpolatedNoise( int(mod(0 + i,10)), x / frequency, y / frequency) * amplitude;
	}
	return total / frequency;
}



                                                                                                
void main()                                                                                     
{                                                                                               
    // Interpolate the attributes of the output vertex using the barycentric coordinates        
    texCoord = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);    
    Normal = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);            
    Normal = normalize(Normal);                                                     
    WorldPos = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);    
    

    // Displace the vertex along the normal                                                     
	float Displacement = perlin(WorldPos.x*freq, WorldPos.z*freq);
	WorldPos += Normal * Displacement * gDispFactor;
	
	gl_ClipDistance[0] = dot(clipPlane, vec4(WorldPos, 1.0));

	distFromPos = distance(WorldPos, gEyeWorldPos);
	dispFactor = gDispFactor;
	height = WorldPos.y;

    gl_Position = gVP * vec4(WorldPos, 1.0);                                              
}                                                                                               
