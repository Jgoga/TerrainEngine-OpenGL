#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image3D img_output;

uniform vec3 u_resolution;
uniform float time;

float Random2D(in vec3 st)
{
	return fract(sin(dot(st.xyz, vec3(12.9898, 78.233, 57.152))) * 43758.5453123);
}

float Interpolate(float a, float b, float x) {  // cosine interpolation
	float ft = x * 3.1415927f;
	float f = (1. - cos(ft)) * 0.5;
	return  a * (1. - f) + b * f;
}

float InterpolatedNoise(int ind, float x, float y, float z) {
	int integer_X = int(floor(x));
	float fractional_X = fract(x);
	int integer_Y = int(floor(y));
	float fractional_Y = fract(y);
    int integer_Z = int(floor(z));
    float fractional_Z = fract(z);
    
	vec3 randomInput = vec3(integer_X, integer_Y, integer_Z);
	float v1 = Random2D(randomInput + vec3(0.0, 0.0, 0.0));
	float v2 = Random2D(randomInput + vec3(1.0, 0.0, 0.0));
	float v3 = Random2D(randomInput + vec3(0.0, 1.0, 0.0));
	float v4 = Random2D(randomInput + vec3(1.0, 1.0, 0.0));
    
    float v5 = Random2D(randomInput + vec3(0.0, 0.0, 1.0));
	float v6 = Random2D(randomInput + vec3(1.0, 0.0, 1.0));
	float v7 = Random2D(randomInput + vec3(0.0, 1.0, 1.0));
	float v8 = Random2D(randomInput + vec3(1.0, 1.0, 1.0));
    
    
	float i1 = Interpolate(v1, v2, fractional_X);
	float i2 = Interpolate(v3, v4,  fractional_X);
    
    float i3 = Interpolate(v5, v6, fractional_X);
    float i4 = Interpolate(v7, v8, fractional_X);
    
    float y1 = Interpolate(i1, i2, fractional_Y);
    float y2 = Interpolate(i3, i4, fractional_Y);
    
    
	return Interpolate(y1, y2, fractional_Z);
}

float perlin(float x, float y, float z){
	
    int numOctaves = 5;
	float persistence = 0.5;
	float total = 0.,
		frequency = .05,
		amplitude = 1.0;
	for (int i = 0; i < numOctaves; ++i) {
		frequency *= 2.;
		amplitude *= persistence;
		
		total += InterpolatedNoise(0, x * frequency, y * frequency, z * frequency) * amplitude;
	}
	return pow(total, 1.0);
}

vec3 random3( vec3 p ) {
    return fract(sin(vec3(dot(p,vec3(127.1,311.7, 194.1729)),dot(p,vec3(269.5,183.3, 72.0192)), dot(p,vec3(183.3,72.0192,311.7))))*43758.5453);
}

float worley(vec3 st) {
	float color = 0.0;

    // Scale
    st *= 15.;

    // Tile the space
    vec3 i_st = floor(st);
    vec3 f_st = fract(st);

    float m_dist = 1.;  // minimun distance

    for (int y= -1; y <= 1; y++) {
        for (int x= -1; x <= 1; x++) {
		for (int z = -1; z<=1 ; z++) {

            // Neighbor place in the grid
            vec3 neighbor = vec3(float(x),float(y), float(z));

            // Random position from current + neighbor place in the grid
            vec3 point = random3(i_st + neighbor);


			// Vector between the pixel and the point
            vec3 diff = neighbor + point - f_st;

            // Distance to the point
            float dist = pow(length(diff), 1.0);

            // Keep the closer distance
            m_dist = min(m_dist, dist);
			}
        }
    }

    // Draw the min distance (distance field)
    color += m_dist;

    return 1. - color;
}

float worleyFBM(vec3 st){
	float color = 0;
	float amplitude = 1;
	float freq = 2.0;
	int octaves = 5;
	float persistence = 0.5;
	for(int i = 0; i < octaves; i++){
		amplitude *= persistence;
		freq *= 0.5;

		color += worley(st/freq)*amplitude;
	}
	return color;

}

float remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)
{
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

void main()
{
    vec3 pixel_coords = vec3(gl_GlobalInvocationID.xyz);


    float perlin = perlin(pixel_coords.x, pixel_coords.y, pixel_coords.z);
	float worley = worleyFBM(pixel_coords/u_resolution);
	perlin = clamp(perlin, 0.0, 1.0);
	worley = clamp(worley, 0.0, 1.0);

	float value = remap(perlin, 0.0, 1.0, worley, 1.0);

	vec4 pixel = vec4(vec3(value),1.0);

	imageStore(img_output, ivec3(pixel_coords), pixel);
   
}