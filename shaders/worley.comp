#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

uniform float time;
uniform vec2 u_resolution;

vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

float worley(vec2 st) {
	float color = 0.0;

    // Scale
    st *= 15.;

    // Tile the space
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);

    float m_dist = 1.;  // minimun distance

    for (int y= -1; y <= 1; y++) {
        for (int x= -1; x <= 1; x++) {
            // Neighbor place in the grid
            vec2 neighbor = vec2(float(x),float(y));

            // Random position from current + neighbor place in the grid
            vec2 point = random2(i_st + neighbor);


			// Vector between the pixel and the point
            vec2 diff = neighbor + point - f_st;

            // Distance to the point
            float dist = pow(length(diff), 1.0);

            // Keep the closer distance
            m_dist = min(m_dist, dist);
        }
    }

    // Draw the min distance (distance field)
    color += m_dist;

    return 1. - color;
}

float worleyFBM(vec2 st){
	float color = 0;
	float amplitude = 1;
	float freq = 4.0;
	int octaves = 4;
	float persistence = 0.5;
	for(int i = 0; i < octaves; i++){
		amplitude *= persistence;
		freq *= 0.5;

		color += worley(st/freq)*amplitude;
	}
	return color;

}

void main()
{
    vec2 pixel_coords = vec2(gl_GlobalInvocationID.xy);

	vec2 st = pixel_coords/u_resolution;
	st.x *= u_resolution.x/u_resolution.y;

    float value = worleyFBM(st);
	vec4 pixel = vec4(vec3(value),1.0);

	imageStore(img_output, ivec2(pixel_coords), pixel);
   
}